# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
    - master
  paths:
    exclude:
    - azure-pipelines.yml

variables:
- group: DevOps Access Keys
- name: version
  value: $(grep -i 'set version' meta.yaml | awk '{ print $5}' | sed 's/"//g')
- name: TagName
  value: "TestTag-$((version))"

stages:

#####################################
# Linux Stages - Microsoft Hosted VMs
#####################################

  ### Linux Build Stage ###
- stage: linux_build_stage
  displayName: 'Ubuntu Build Stage'
  jobs:
  - job: buildTools
    displayName: 'Build the Fermitools'
    timeoutInMinutes: 150
    pool:
      vmImage: 'ubuntu-16.04'
    variables:
    - name: BUILD_NUMBER
      value: $(conda search -c fermi/label/dev fermitools | grep -i $(version) | tail -1 | awk '{ print $3}' | cut -d "_" -f 2)
    steps:
    # Manually adding conda to the PATH is a step required by Microsoft
    - bash: echo "##vso[task.prependpath]$CONDA/bin"
      displayName: 'Add conda to PATH'
    ### Build commands start here ###
    # Query last build number for this version and iterate if necessary
    - bash: echo "##vso[task.setvariable variable=BUILD_NUMBER]$(BUILD_NUMBER)"
      displayName: 'Query last build number of this version'
    - bash: echo "##vso[task.setvariable variable=BUILD_NUMBER]$(expr $BUILD_NUMBER + 1)"
      condition: notIn(variables['BUILD_NUMBER'], variables['noSuch'])
      displayName: 'Iterate build number if it exists'
    # Set up environment and run the build
    - bash: conda install --yes --quiet -c conda-forge -c fermi python=2.7 anaconda-client conda-build libiconv pathlib2 fermi-repoman
      displayName: 'Set up build environment'
    # - bash: conda build --python=2.7 -c conda-forge -c fermi .
    #   displayName: 'Run the build'
    # - bash: anaconda -v -t $(Jasercion-Anaconda-Api) upload -u fermi --label=dev /usr/share/miniconda/conda-bld/linux-64/fermitools-*
    #   displayName: 'Upload build to Anaconda Cloud'


- stage: repo_tag_sync
  displayName: 'Repo Tag Stage'
  condition: succeeded('linux_build_stage')
  jobs:
  - job: SyncTags
    displayName: 'Synchronize tags and version numbers'
    timeoutInMinutes: 30
    pool:
      vmImage: 'ubuntu-16.04'
    variables:
    - name: VERSION
      value: $(grep -i 'set version' meta.yaml | awk '{ print $5}' | sed 's/"//g')
    steps:
    # Manually adding conda to the PATH is a step required by Microsoft
    - bash: echo "##vso[task.prependpath]$CONDA/bin"
      displayName: 'Add conda to PATH'
    - bash: echo "##vso[task.setvariable variable=VERSION]$(VERSION)"
      displayName: 'Expose Version string as environment variable.'
    # Set up environment and run the build
    - bash: conda install --yes --quiet -c conda-forge -c fermi python=2.7 anaconda-client conda-build libiconv pathlib2 fermi-repoman
      displayName: 'Set up build environment'
    - bash: |
        mkdir components && cd components
        repoman --remote-base https://github.com/fermi-lat checkout-list ../packageList.txt 
      displayName: 'Tag Github Repositories'
    #     git config --global user.email "joseph.a.asercion@nasa.gov"
    #     git config --global user.name "jasercion"
    #     git config --global credential.helper store
    #     echo https://$(Github-Access-Token):x-oauth-basic@github.com>>~/.git-credentials
    #     ../multi_release.sh $(TagName) "Automatic tag generated by Azure Pipeline."
    - bash: |
        echo $VERSION
        conda build --python=2.7 -c conda-forge -c fermi components/Fermitools-dependencies
        anaconda -v -t $(Jasercion-Anaconda-Api) upload -u fermi --label=$(TagName) /usr/share/miniconda/conda-bld/noarch/fermitools-dependencies-*
        # anaconda -v -t $(Jasercion-Anaconda-Api) label -o fermi --copy $(TagName) main
      displayName: 'Upload and Label Runtime Dependencies'
    - bash: |
        conda build --python=2.7 -c conda-forge -c fermi components/Fermitools-build-deps
        anaconda -v -t $(Jasercion-Anaconda-Api) upload -u fermi --label=$(TagName) /usr/share/miniconda/conda-bld/noarch/fermitools-build-deps-*
      displayName: 'Upload and Label Build Dependencies'


  #### Linux Test Stage ###
#- stage: linux_test_stage
  #displayName: 'Ubuntu Test Stage'
  #condition: succeeded('linux_build_stage')
  #jobs:
  #- job: testTools
  #  displayName: 'Test the Fermitools'
  #  timeoutInMinutes: 150
  #  pool:
  #    vmImage: 'ubuntu-16.04'
  #  steps:
  #  - bash: echo "##vso[task.prependpath]$CONDA/bin"
  #    displayName: 'Add conda to PATH'
  #  # junit-xml must be installed so the unit test script
  #  # can produce output in the JUnit format
  #  - task: CondaEnvironment@0
  #    inputs:
  #      environmentName: 'Test'
  #      packageSpecs: 'python=2.7'
  #  - bash: |
  #      conda install --yes --quiet -c conda-forge -c fermi -c fermi/label/root6 -c fermi/label/dev fermitools=$(version) fermitools-test-scripts
  #      pip install junit-xml
  #    displayName: 'Install the tools and test scripts'
  #  - bash: |
  #      source activate Test
  #      ST-unit-test --bit64
  #    displayName: 'Run Unit Tests'
  #  - task: PublishTestResults@2
  #    inputs:
  #      testResultsFormat: 'JUnit'
  #      testResultsFiles: 'ST-unit-test-Output.xml'
######################################

######################################
## MacOS Stages - Microsoft Hosted VMs
######################################

  #### MacOS Build Stage ##
#- stage: macos_build_stage
  #displayName: 'MacOS Build Stage'
  #dependsOn: []
  #jobs:
  #- job: buildTools
  #  displayName: 'Build the Fermitools'
  #  timeoutInMinutes: 150
  #  pool:
  #    vmImage: 'macOS-10.14'
  #  variables:
  #  - name: BUILD_NUMBER
  #    value: $(conda search -c fermi/label/dev fermitools | grep -i $(version) | tail -1 | awk '{ print $3}' | cut -d "_" -f 2)
  #  steps:
  #  # Manually adding conda to the PATH is a step required by Microsoft
  #  - bash: echo "##vso[task.prependpath]$CONDA/bin"
  #    displayName: 'Add conda to PATH'
  #  # On Hosted macOS, the agent user doesn't have ownership of Miniconda's installation directory/
  #  # We need to take ownership if we want to update conda or install packages globally
  #  - bash: sudo chown -R $USER $CONDA
  #    displayName: 'Take ownership of conda installation'

  #  ### Build commands start here ###
  #  # Query last build number for this version and iterate if necessary
  #  - bash: echo "##vso[task.setvariable variable=BUILD_NUMBER]$(BUILD_NUMBER)"
  #    displayName: 'Query last build number of this version'
  #  - bash: echo "##vso[task.setvariable variable=BUILD_NUMBER]$(expr $BUILD_NUMBER + 1)"
  #    condition: notIn(variables['BUILD_NUMBER'], variables['noSuch'])
  #    displayName: 'Iterate build number if it exists'
  #  # Set up environment and run the build
  #  - bash: conda install --yes --quiet -c conda-forge python=2.7 anaconda-client conda-build pathlib2
  #    displayName: 'Set up build environment'
  #  - bash: conda build --python=2.7 -c conda-forge -c fermi -c fermi/label/root6 .
  #    displayName: 'Run the build'
  #  - bash: anaconda -v -t $(Jasercion-Anaconda-Api) upload -u fermi --label=dev /usr/local/miniconda/conda-bld/osx-64/fermitools-*
  #    displayName: 'Upload build to Anaconda Cloud'

  #### MacOS Test Stage ###
#- stage: macos_test_stage
  #displayName: 'MacOS Test Stage'
  #condition: succeeded('macos_build_stage')
  #jobs:
  #- job: testTools
  #  displayName: 'Test the Fermitools'
  #  timeoutInMinutes: 150
  #  pool:
  #    vmImage: 'macOS-10.14'
  #  steps:
  #  # Manually adding conda to the PATH is a step required by Microsoft
  #  - bash: echo "##vso[task.prependpath]$CONDA/bin"
  #    displayName: 'Add conda to PATH'
  #  # On Hosted macOS, the agent user doesn't have ownership of Miniconda's installation directory/
  #  # We need to take ownership if we want to update conda or install packages globally
  #  - bash: sudo chown -R $USER $CONDA
  #    displayName: 'Take ownership of conda installation'
  #  # junit-xml must be installed so the unit test script
  #  - task: CondaEnvironment@0
  #    inputs:
  #      environmentName: 'Test'
  #      packageSpecs: 'python=2.7'
  #  # can produce output in the JUnit format
  #  - bash: |
  #      conda install --yes --quiet -c conda-forge -c fermi -c fermi/label/root6 -c fermi/label/dev fermitools=$(version) fermitools-test-scripts
  #      pip install junit-xml
  #    displayName: 'Install the tools and test scripts'
  #  - bash: |
  #      source activate Test
  #      ST-unit-test --bit64
  #    displayName: 'Run Unit Tests'
  #  - task: PublishTestResults@2
  #    inputs:
  #      testResultsFormat: 'JUnit'
  #      testResultsFiles: 'ST-unit-test-Output.xml'
######################################
